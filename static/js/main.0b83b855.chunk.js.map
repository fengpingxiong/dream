{"version":3,"sources":["finalproject.js","App.js","serviceWorker.js","index.js"],"names":["container","stats","camera","scene","renderer","controls","water","sun","light","mixers","clock","THREE","datas","loader","GLTFLoader","onProgress","onError","errorMessage","console","log","sphere","loadDolphin","load","gltf","position","copy","rotation","y","scale","set","add","model","children","animation","animations","mixer","push","clipAction","play","onLoad","human","loadHuman","deer","loadDeer","loadChair","onWindowResize","aspect","window","innerWidth","innerHeight","updateProjectionMatrix","setSize","animate","requestAnimationFrame","time","performance","now","i","length","mesh","x","z","material","uniforms","value","render","update","delta","getDelta","moves","setTimeout","geometry","texture","wrapS","wrapT","repeat","encoding","anisotropy","map","transparent","opacity","Math","PI","receiveShadow","castShadow","createBox","color","specular","shininess","createSphere","App","FinalProject","document","getElementById","setPixelRatio","devicePixelRatio","appendChild","domElement","waterGeometry","waterNormals","Water","textureWidth","textureHeight","alpha","sunDirection","sunColor","waterColor","distortionScale","sky","Sky","setScalar","parameters","pmremGenerator","theta","phi","cos","sin","normalize","environment","fromScene","updateSun","OrbitControls","maxPolarAngle","target","minDistance","maxDistance","Stats","dom","addEventListener","init","listener","sound","buffer","setBuffer","setLoop","setVolume","createSound","Fragment","Boolean","location","hostname","match","ReactDOM","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0b83b855.chunk.js","sourcesContent":["import React from 'react';\n\nimport * as THREE from 'three/build/three.module.js';\nimport Stats from 'three/examples/jsm/libs/stats.module.js';\nimport { GUI } from 'three/examples/jsm/libs/dat.gui.module.js';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport { Sky } from 'three/examples/jsm/objects/Sky.js';\nimport { Water } from 'three/examples/jsm/objects/Water.js';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\n\nvar container, stats;\nvar camera, scene, renderer;\nvar controls, water, sun;\nvar light;\nconst mixers = [];\nconst clock = new THREE.Clock();\nconst datas = [];\n\nconst loader = new GLTFLoader();\nconst onProgress = () => { };\nconst onError = (errorMessage) => { console.log(errorMessage); };\n\nfunction createSound() {\n  var listener = new THREE.AudioListener();\n  // camera.add( listener );\n\n  // create a global audio source\n  var sound = new THREE.Audio(listener);\n\n  // load a sound and set it as the Audio object's buffer\n  var audioLoader = new THREE.AudioLoader();\n  audioLoader.load('New Recording 2.m4a', function (buffer) {\n    sound.setBuffer(buffer);\n    sound.setLoop(true);\n    sound.setVolume(1);\n    sound.play();\n  });\n\n}\n\nlet sphere = null;\n\nfunction createSphere() {\n  const geometry = new THREE.SphereGeometry( 20, 100, 100 );\n  const material = new THREE.MeshPhongMaterial( { color: 0xc2a68c, specular: 0xff0000, shininess:10, transparent: true, opacity : 0.3} );\n  sphere = new THREE.Mesh( geometry, material );\n  const position = new THREE.Vector3(-30, 20, -1000);\n  sphere.position.copy(position);\n  scene.add( sphere );\n}\n\n\nfunction createBox() {\n  const geometry = new THREE.BoxBufferGeometry(60, 60, 60);\n  const textureLoader = new THREE.TextureLoader();\n  const texture = textureLoader.load(\"codegreen.jpeg\", function (texture) {\n    texture.wrapS = texture.wrapT = THREE.RepeatWrapping;\n  });\n  texture.repeat.set(2, 2);\n  texture.encoding = THREE.sRGBEncoding;\n  texture.anisotropy = 16;\n\n  const material = new THREE.MeshStandardMaterial({\n    map: texture,\n    // bumpMap: texture,\n    // bumpScale: 5,\n    transparent: true,\n    opacity: 0.5\n\n  });\n\n  const mesh = new THREE.Mesh(geometry, material);\n  mesh.rotation.x = - Math.PI / 2.2;\n  mesh.position.y = 10;\n  mesh.receiveShadow = true;\n  mesh.castShadow = true;\n\n  const position = new THREE.Vector3(-30, 40, -1000);\n  mesh.position.copy(position);\n\n  datas.push(mesh);\n\n  scene.add(mesh);\n}\n\nlet dolphin = null;\n\nfunction loadDolphin() {\n  const url = \"game-ready_dolphin_swimming/scene.gltf\";\n  const onLoad = (gltf) => {\n    const position = new THREE.Vector3(4, -20, -100);\n    gltf.scene.position.copy(position);\n    gltf.scene.rotation.y = 1.5;\n    gltf.scene.scale.set(2, 2, 2);\n    scene.add(gltf.scene);\n\n    const model = gltf.scene.children[0];\n    model.position.copy(position);\n\n    dolphin = model;\n    const animation = gltf.animations[0];\n\n    const mixer = new THREE.AnimationMixer(model);\n    mixers.push(mixer);\n\n    const action = mixer.clipAction(animation);\n    action.play();\n  };\n\n  loader.load(url, gltf => onLoad(gltf), onProgress, onError);\n}\n\n// let cookie = null;\n//\n// function loadCookie() {\n//   const url = \"cookie/scene.gltf\";\n//   const position = new THREE.Vector3(-30, 40, -1000);\n//   const onLoad = (gltf) => {\n//     gltf.scene.position.copy(position);\n//     gltf.scene.scale.set(0.3, 0.3, 0.3); // scale here\n//     scene.add(gltf.scene);\n//\n//     cookie = gltf.scene.children[0];\n//   };\n//   loader.load(url, gltf => onLoad(gltf, newStandard), onProgress, onError);\n//\n// }\n\nlet human = null;\nfunction loadHuman() {\n  const url = \"human_animation_set/scene.gltf\";\n\n  const onLoad = (gltf) => {\n    const position = new THREE.Vector3(-30, 0, -400);\n    gltf.scene.position.copy(position);\n    gltf.scene.scale.set(0.5, 0.5, 0.5);\n    scene.add(gltf.scene);\n\n    const model = gltf.scene.children[0];\n    model.position.copy(position);\n\n    human = model;\n    const animation = gltf.animations[0];\n\n    const mixer = new THREE.AnimationMixer(model);\n    mixers.push(mixer);\n\n    const action = mixer.clipAction(animation);\n    action.play();\n  };\n\n  loader.load(url, gltf => onLoad(gltf), onProgress, onError);\n}\n\nlet deer = null;\n\nfunction loadDeer() {\n  const url = \"deer_23/scene.gltf\";\n\n  const onLoad = (gltf) => {\n    const position = new THREE.Vector3(-30, 0, -200);\n    gltf.scene.position.copy(position);\n    gltf.scene.scale.set(10, 10, 10);\n    scene.add(gltf.scene);\n\n    const model = gltf.scene.children[0];\n    model.position.copy(position);\n\n    deer = model;\n    const animation = gltf.animations[0];\n\n    const mixer = new THREE.AnimationMixer(model);\n    mixers.push(mixer);\n\n    const action = mixer.clipAction(animation);\n    action.play();\n  };\n\n  loader.load(url, gltf => onLoad(gltf), onProgress, onError);\n}\n\nfunction loadChair() {\n  const url = \"modern_rocking_chair/scene.gltf\";\n\n  const onLoad = (gltf) => {\n    gltf.scene.position.copy(new THREE.Vector3(45, 0, 5));\n    gltf.scene.scale.set(15, 15, 15);\n    gltf.scene.rotation.y = 5;\n    scene.add(gltf.scene);\n  };\n\n  loader.load(url, gltf => onLoad(gltf), onProgress, onError);\n\n}\n\nfunction init() {\n\n  container = document.getElementById('root');\n  renderer = new THREE.WebGLRenderer();\n  renderer.setPixelRatio(window.devicePixelRatio);\n  renderer.setSize(window.innerWidth, window.innerHeight);\n  container.appendChild(renderer.domElement);\n\n  light = new THREE.AmbientLight(0xc3d1d9, 1);\n  scene = new THREE.Scene();\n  camera = new THREE.PerspectiveCamera(85, window.innerWidth / window.innerHeight, 1, 20000);\n  // camera.position.set( 0, 30, 39.507533623805514 );\n  sun = new THREE.Vector3();\n  var waterGeometry = new THREE.PlaneBufferGeometry(10000, 20000);\n\n  var waterNormals = new THREE.TextureLoader().load(\"waternormals.jpg\", function (texture) {\n    texture.wrapS = texture.wrapT = THREE.RepeatWrapping;\n  });\n\n  water = new Water(\n    waterGeometry,\n    {\n      textureWidth: 512,\n      textureHeight: 512,\n      waterNormals: waterNormals,\n      alpha: 1.0,\n      sunDirection: new THREE.Vector3(),\n      sunColor: 0xe6ded5,\n      waterColor: 0xe6ded5,\n      distortionScale: 1,\n    }\n  );\n\n  water.rotation.x = - Math.PI / 2;\n\n  scene.add(water);\n\n  var sky = new Sky();\n  sky.scale.setScalar(10000);\n  scene.add(sky);\n  scene.add(light);\n\n  var uniforms = sky.material.uniforms;\n\n  uniforms['turbidity'].value = 1;\n  uniforms['rayleigh'].value = 5;\n  uniforms['mieCoefficient'].value = 0.005;\n  uniforms['mieDirectionalG'].value = 0.8;\n\n  var parameters = {\n    inclination: 0.471,\n    azimuth: 0.1258\n  };\n\n  var pmremGenerator = new THREE.PMREMGenerator(renderer);\n\n  function updateSun() {\n    //var theta = Math.PI * (parameters.inclination - 1);\n    var theta = Math.PI * (parameters.inclination - 0.5);\n    var phi = 2 * Math.PI * (parameters.azimuth - 0.5);\n\n    sun.x = Math.cos(phi);\n    sun.y = Math.sin(phi) * Math.sin(theta);\n    sun.z = Math.sin(phi) * Math.cos(theta);\n\n    sky.material.uniforms['sunPosition'].value.copy(sun);\n    water.material.uniforms['sunDirection'].value.copy(sun).normalize();\n\n    scene.environment = pmremGenerator.fromScene(sky).texture;\n  }\n\n  updateSun();\n\n  controls = new OrbitControls(camera, renderer.domElement);\n  controls.maxPolarAngle = Math.PI * 0.45;\n  controls.target.set(0, 10, 0);\n  controls.minDistance = 40.0;\n  controls.maxDistance = 500.0;\n  controls.update();\n\n  stats = new Stats();\n  container.appendChild(stats.dom);\n\n  window.addEventListener('resize', onWindowResize, false);\n\n}\n\nfunction onWindowResize() {\n  camera.aspect = window.innerWidth / window.innerHeight;\n  camera.updateProjectionMatrix();\n  renderer.setSize(window.innerWidth, window.innerHeight);\n}\n\n\nsetTimeout(function () {\n  loadDeer();\n  loadDolphin();\n}, 2500);\n\nsetTimeout(function () {\n  loadHuman();\n}, 10500);\n\nsetTimeout(function () {\n  createBox();\n  // loadCookie();\n}, 21000);\n\nsetTimeout(function () {\n  createSphere();\n}, 24500);\n\nfunction moves() {\n  if (deer && deer.position) {\n\n    if (deer.position.z <= 150) {\n      deer.position.z += 0.49;\n    }\n\n    if (deer.position.x <= 3) {\n      deer.position.x += 0.1;\n    }\n  }\n\n  if (human && human.position) {\n\n    if (human.position.z <= 5500) {\n      human.position.z += 2;\n    }\n\n    if (human.position.x <= 55) {\n      human.position.x += 0.3;\n    }\n  }\n\n  // if (cookie && cookie.position) {\n  //\n  //   if (cookie.position.z <= 5500) {\n  //     cookie.position.z += 4;\n  //   }\n  //\n  //   if (cookie.position.x <= 55) {\n  //     cookie.position.x += 0.3;\n  //   }\n  // }\n\n  for (let i = 0; i < datas.length; i++) {\n    const mesh = datas[i];\n    if (mesh && mesh.position) {\n      if (mesh.position.z <= 5500) {\n        mesh.position.z += 2.5;\n      }\n\n      if (mesh.position.x <= 0) {\n        mesh.position.x += 0.5;\n      }\n    }\n\n    if (sphere && sphere.position) {\n\n      if (sphere.position.z <= 5500) {\n        sphere.position.z += 1;\n      }\n\n      if (sphere.position.x <= 0) {\n        sphere.position.x += 0.3;\n      }\n    }\n  }\n\n}\n\nfunction update() {\n  const delta = clock.getDelta();\n  for (const mixer of mixers) {\n    mixer.update(delta);\n  }\n}\n\nfunction animate() {\n  requestAnimationFrame(animate);\n  render();\n  stats.update();\n  update();\n  moves();\n}\n\nfunction render() {\n  // console.log(camera);\n  var time = performance.now() * 0.001;\n  // mesh.position.x = Math.sin(time) * 20;\n  // mesh.position.z = Math.cos(time) * 20;\n  for (let i = 0; i < datas.length; i++) {\n    const mesh = datas[i];\n    mesh.rotation.x = time * 0.3;\n    // mesh.rotation.y = time * 4;\n    mesh.rotation.z = time * 0.3;\n  }\n\n  water.material.uniforms['time'].value += 1.0 / 60.0;\n\n  renderer.render(scene, camera);\n}\n\nfunction App() {\n  init();\n\n  loadChair();\n\n  animate();\n\n  document.addEventListener('keyup', () => {\n    createSound();\n  })\n\n  return <React.Fragment />;\n}\n\nexport default App;\n","// assignment01\n// import AS1 from \"./assignment01\";\n// import AS2 from \"./assignment2\";\n// export default AS2;\n\nimport FinalProject from \"./finalproject\";\nexport default FinalProject;\n\n// import Final2 from \"./final2\";\n// export default Final2;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}