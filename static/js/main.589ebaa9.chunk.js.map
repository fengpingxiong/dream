{"version":3,"sources":["finalproject.js","App.js","serviceWorker.js","index.js"],"names":["container","stats","camera","scene","renderer","controls","water","sun","mesh","light","mixers","clock","THREE","loader","GLTFLoader","onProgress","onError","errorMessage","console","log","loadChair","position","load","gltf","copy","scale","set","rotation","y","add","onLoad","loadCookie","human","loadHuman","model","children","animation","animations","mixer","push","clipAction","play","deer","loadDeer","loadDolphin","onWindowResize","aspect","window","innerWidth","innerHeight","updateProjectionMatrix","setSize","animate","requestAnimationFrame","time","performance","now","x","Math","sin","z","cos","material","uniforms","value","render","update","delta","getDelta","App","FinalProject","document","getElementById","setPixelRatio","devicePixelRatio","appendChild","domElement","waterGeometry","waterNormals","texture","wrapS","wrapT","Water","textureWidth","textureHeight","alpha","sunDirection","sunColor","waterColor","distortionScale","fog","undefined","PI","sky","Sky","setScalar","parameters","pmremGenerator","theta","phi","normalize","environment","fromScene","updateSun","geometry","roughness","OrbitControls","target","Stats","dom","addEventListener","init","i","color","transparent","opacity","wireframe","wireframeLinejoin","skinning","encoding","anisotropy","imgTexture","createMaterial","repeat","map","bumpMap","cookie","receiveShadow","createCookieTexture","listener","sound","buffer","setBuffer","setLoop","setVolume","createSound","Fragment","Boolean","location","hostname","match","ReactDOM","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.589ebaa9.chunk.js","sourcesContent":["import React from 'react';\n\nimport * as THREE from 'three/build/three.module.js';\nimport Stats from 'three/examples/jsm/libs/stats.module.js';\nimport { GUI } from 'three/examples/jsm/libs/dat.gui.module.js';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport { Sky } from 'three/examples/jsm/objects/Sky.js';\nimport { Water } from 'three/examples/jsm/objects/Water.js';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\n\nvar container, stats;\nvar camera, scene, renderer;\nvar controls, water, sun, mesh;\nvar light\nvar cookie;\nlet newMaterial;\nlet standardMaterial;\nlet newStandard;\nconst mixers = [];\nconst clock = new THREE.Clock();\n\nconst loader = new GLTFLoader();\nconst onProgress = () => { };\nconst onError = (errorMessage) => { console.log(errorMessage); };\n\n\nfunction createSound(){\n  var listener = new THREE.AudioListener();\n  // camera.add( listener );\n\n  // create a global audio source\n  var sound = new THREE.Audio( listener );\n\n// load a sound and set it as the Audio object's buffer\n  var audioLoader = new THREE.AudioLoader();\n  audioLoader.load( 'New Recording 2.m4a', function( buffer ) {\n    sound.setBuffer( buffer );\n\t  sound.setLoop( true );\n\t  sound.setVolume( 1 );\n\t  sound.play();\n  });\n\n}\nfunction createMaterial(){\n  //let diffuseColor = 0xfcfafa;\n  newMaterial = new THREE.MeshNormalMaterial({\n    color: 0xffffff,\n    transparent: true,\n    opacity:0.5,\n    wireframe: true,\n    wireframeLinejoin: 'round',\n    skinning: true\n  });\n  standardMaterial = new THREE.MeshStandardMaterial({ color:0x8e80ab, skinning: true});\n  const textureLoader = new THREE.TextureLoader();\n  const texture = textureLoader.load( 'textures/wave-textures-white-background-vector_53876-60286.jpg' );\n        texture.encoding = THREE.sRGBEncoding;\n        texture.anisotropy = 16;\n  const imgTexture = new THREE.TextureLoader().load('pinkCloudBlueSky.jpg');\n        imgTexture.wrapS = imgTexture.wrapT = THREE.RepeatWrapping;\n        imgTexture.anisotropy = 16;\n  newStandard = new THREE.MeshBasicMaterial({\n    //map: imgTexture,\n    color: 0xfcfafa,\n    //bumpMap: imgTexture,\n    //bumpScale: 1,\n    //displacementMap: imgTexture,\n    //displacementScale: 1,\n    //envMap: imgTexture,\n    skinning: true\n  });\n}\n\nfunction loadChair(position) {\n  const url = \"modern_rocking_chair/scene.gltf\";\n\n  if (!position) {\n    var position = new THREE.Vector4(1000, 1000, 1000,1000);\n\n  }\n\n  const onLoad = (gltf) => {\n      gltf.scene.position.copy(position);\n      gltf.scene.scale.set(60, 60, 60); // scale here\n\n      gltf.scene.rotation.y = 110;\n      scene.add(gltf.scene);\n  };\n  loader.load(url, gltf => onLoad(gltf, newStandard), onProgress, onError);\n\n}\n\n\n\n// function loadCookie(position) {\n//   const url = \"cookie/scene.gltf\";\n//\n//   if (!position) {\n//     var position = new THREE.Vector4(1000, 1000, 1000,1000);\n//\n//   }\n//\n//   const onLoad = (gltf) => {\n//       gltf.scene.position.copy(position);\n//       gltf.scene.scale.set(1, 1, 1); // scale here\n//       scene.add(gltf.scene);\n//   };\n//   loader.load(url, gltf => onLoad(gltf, newStandard), onProgress, onError);\n//\n// }\n\nfunction loadCookie(position) {\n  const url = \"cookie/scene.gltf\";\n\n  if (!position) {\n    var position = new THREE.Vector4(1000, 1000, 1000,1000);\n\n  }\n\n  const onLoad = (gltf) => {\n      gltf.scene.position.copy(position);\n      gltf.scene.scale.set(1, 1, 1); // scale here\n      scene.add(gltf.scene);\n  };\n  loader.load(url, gltf => onLoad(gltf, newMaterial), onProgress, onError);\n\n}\n\nfunction createCookieTexture() {\n\n  const textureLoader = new THREE.TextureLoader();\n  const texture = textureLoader.load( 'Program-Code-Feature-Image.jpg', function (texture) {\n      texture.wrapS = texture.wrapT = THREE.RepeatWrapping;\n  });\n  texture.repeat.set(5, 5);\n  texture.encoding = THREE.sRGBEncoding;\n  texture.anisotropy = 16;\n\n  const material = new THREE.MeshStandardMaterial( {\n    map: texture,\n    bumpMap: texture,\n    // bumpScale: 5,\n    //color: diffuseColor\n  } );\n  mesh = new THREE.Mesh( cookie, material );\n  mesh.rotation.x = - Math.PI / 2.2;\n  mesh.position.y = 0;\n  mesh.receiveShadow = true;\n  //mesh.castShadow = true;\n  scene.add( mesh );\n}\n\nlet human = null;\nfunction loadHuman(position) {\n  const url = \"human_animation_set/scene.gltf\";\n\n  const onLoad = ( gltf) => {\n    gltf.scene.position.copy(position);\n    gltf.scene.scale.set(0.5, 0.5, 0.5);\n    gltf.scene.rotation.y = -90;\n    scene.add( gltf.scene);\n\n    const model = gltf.scene.children[ 0 ];\n    model.position.copy( position );\n\n    human = model;\n    const animation = gltf.animations[ 0 ];\n\n    const mixer = new THREE.AnimationMixer( model );\n    mixers.push( mixer );\n\n    const action = mixer.clipAction(animation);\n    action.play();\n  };\n\n  loader.load(url, gltf => onLoad(gltf, newMaterial), onProgress, onError);\n}\n\n\nlet deer = null;\n\nfunction loadDeer(position) {\n    const url = \"deer_23/scene.gltf\";\n    const onLoad = ( gltf) => {\n      gltf.scene.position.copy(position);\n      gltf.scene.scale.set(5, 5, 5);\n      gltf.scene.rotation.y = -90;\n      scene.add( gltf.scene);\n\n      const model = gltf.scene.children[ 0 ];\n      model.position.copy( position );\n\n      deer = model;\n      const animation = gltf.animations[ 0 ];\n\n      const mixer = new THREE.AnimationMixer( model );\n      mixers.push( mixer );\n\n      const action = mixer.clipAction(animation);\n      action.play();\n    };\n\n    loader.load(url, gltf => onLoad(gltf, newMaterial), onProgress, onError);\n}\n\nlet dolphin = null;\n\nfunction loadDolphin(position) {\n    const url = \"game-ready_dolphin_swimming/scene.gltf\";\n    const onLoad = ( gltf) => {\n      gltf.scene.position.copy(position);\n      gltf.scene.scale.set(6, 6, 6);\n      scene.add( gltf.scene);\n\n      const model = gltf.scene.children[ 0 ];\n      model.position.copy( position );\n\n      dolphin = model;\n      const animation = gltf.animations[ 0 ];\n\n      const mixer = new THREE.AnimationMixer( model );\n      mixers.push( mixer );\n\n      const action = mixer.clipAction(animation);\n      action.play();\n    };\n\n    loader.load(url, gltf => onLoad(gltf, newMaterial), onProgress, onError);\n}\n\nfunction init() {\n\n    container = document.getElementById('root');\n\n    //\n    renderer = new THREE.WebGLRenderer();\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    container.appendChild(renderer.domElement);\n\n    light = new THREE.AmbientLight(0xc3d1d9,1);\n\n    scene = new THREE.Scene();\n\n    camera = new THREE.PerspectiveCamera( 55, window.innerWidth / window.innerHeight, 1, 20000 );\n    camera.position.set( -144.37621838106483, 87.53752760239382, -15.698458124364846);\n\n    sun = new THREE.Vector3();\n\n    //\n\n    // Water\n\n    var waterGeometry = new THREE.PlaneBufferGeometry(10000, 20000);\n\n    var waterNormals = new THREE.TextureLoader().load(\"/xiong-1 .jpg\", function (texture) {\n        texture.wrapS = texture.wrapT = THREE.RepeatWrapping;\n    });\n\n    water = new Water(\n        waterGeometry,\n        {\n            textureWidth: 512,\n            textureHeight: 512,\n            waterNormals: waterNormals,\n            alpha: 1.0,\n            sunDirection: new THREE.Vector3(),\n            sunColor: 0xd48b33,\n            waterColor: 0xd48b33,\n            //waterColor: 0x001e0f,\n            distortionScale: 1,\n            fog: scene.fog !== undefined\n        }\n    );\n\n    water.rotation.x = - Math.PI / 2;\n\n    scene.add(water);\n\n    // Skybox\n\n    var sky = new Sky();\n    sky.scale.setScalar(10000);\n    scene.add(sky);\n    scene.add(light);\n    var uniforms = sky.material.uniforms;\n\n    uniforms['turbidity'].value = 10;\n    uniforms['rayleigh'].value = 5;\n    uniforms['mieCoefficient'].value = 0.005;\n    uniforms['mieDirectionalG'].value = 0.8;\n\n    var parameters = {\n        inclination: 0.49,\n        azimuth: 0.49,\n    };\n\n    var pmremGenerator = new THREE.PMREMGenerator(renderer);\n\n    function updateSun() {\n\n        var theta = Math.PI * (parameters.inclination - 0.5);\n        var phi = 2 * Math.PI * (parameters.azimuth - 0.5);\n\n        sun.x = Math.cos(phi);\n        sun.y = Math.sin(phi) * Math.sin(theta);\n        sun.z = Math.sin(phi) * Math.cos(theta);\n\n        sky.material.uniforms['sunPosition'].value.copy(sun);\n        water.material.uniforms['sunDirection'].value.copy(sun).normalize();\n\n        scene.environment = pmremGenerator.fromScene(sky).texture;\n\n    }\n\n    updateSun();\n\n    //\n\n    var geometry = new THREE.BoxBufferGeometry(6, 6, 6);\n    var material = new THREE.MeshStandardMaterial({ roughness: 0 });\n\n    mesh = new THREE.Mesh(geometry, material);\n\n\n    controls = new OrbitControls(camera, renderer.domElement);\n    // controls.maxPolarAngle = Math.PI * 2;\n    controls.target.set(0, 50, 0);\n    // controls.minDistance = 0;\n    // controls.maxDistance = 1000.0;\n    controls.update();\n\n    stats = new Stats();\n    container.appendChild(stats.dom);\n\n    window.addEventListener('resize', onWindowResize, false);\n\n}\n\nfunction onWindowResize() {\n\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.updateProjectionMatrix();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n\n}\n\nfunction moveDeer () {\n  if(deer && deer.position){\n\n    if(deer.position.z <= 1000) {\n      deer.position.z += 0.6;\n    }\n\n\n\n    // if(deer.position.x >= 20) {\n    //   deer.position.x += 0.08;\n    // }\n  }\n\n  if(human && human.position){\n\n    if(human.position.z <= 10000) {\n      human.position.z += 60;\n    }\n  }\n\n}\n\n\nfunction update() {\n\n  const delta = clock.getDelta();\n\n  for ( const mixer of mixers ) {\n    mixer.update( delta );\n  }\n\n}\n\nfunction animate() {\n\n    requestAnimationFrame(animate);\n    render();\n    stats.update();\n    update();\n    moveDeer();\n\n}\n\nfunction render() {\n    // console.log(camera);\n    // console.log(deer.rotation);\n    var time = performance.now() * 0.001;\n\n    mesh.position.x = Math.sin(time) * 20;\n    mesh.position.z = Math.cos(time) * 20;\n    mesh.rotation.x = time * 0.5;\n    mesh.rotation.z = time * 0.51;\n\n    water.material.uniforms['time'].value += 1.0 / 60.0;\n\n    renderer.render(scene, camera);\n\n}\n\nfunction App() {\n    init();\n\n\n    //console.log(scene);\n\n    for (let i = 0; i < 3; i++) {\n\n    }\n\n    for (let i = 0; i < 30; i++) {\n\n   }\n    createMaterial();\n    loadDeer(new THREE.Vector3(-100, 0, -500));\n    loadChair(new THREE.Vector3(20, -0.1, -20));\n    loadHuman(new THREE.Vector3(6000, -0.1, -3950));\n    loadCookie(new THREE.Vector3(10, 0, -600));\n    loadDolphin(new THREE.Vector3(100, -40, -5));\n    createCookieTexture();\n    animate();\n\n    document.addEventListener('keyup', () => {\n        createSound();\n    })\n\n    return <React.Fragment />;\n}\n\nexport default App;\n","// assignment01\n// import AS1 from \"./assignment01\";\n// import AS2 from \"./assignment2\";\n// export default AS2;\n\nimport FinalProject from \"./finalproject\";\nexport default FinalProject;\n\n// import Final2 from \"./final2\";\n// export default Final2;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}