{"version":3,"sources":["finalproject.js","App.js","serviceWorker.js","index.js"],"names":["container","stats","camera","scene","renderer","controls","water","sun","mesh","light","mixers","clock","THREE","loader","GLTFLoader","onProgress","onError","errorMessage","console","log","loadChair","position","load","gltf","copy","scale","set","add","onLoad","deer","loadDeer","model","children","animation","animations","mixer","push","clipAction","play","onWindowResize","aspect","window","innerWidth","innerHeight","updateProjectionMatrix","setSize","animate","requestAnimationFrame","time","performance","now","x","Math","sin","z","cos","rotation","material","uniforms","value","render","update","delta","getDelta","App","FinalProject","document","getElementById","setPixelRatio","devicePixelRatio","appendChild","domElement","waterGeometry","waterNormals","texture","wrapS","wrapT","Water","textureWidth","textureHeight","alpha","sunDirection","sunColor","waterColor","distortionScale","fog","undefined","PI","sky","Sky","setScalar","parameters","pmremGenerator","theta","phi","y","normalize","environment","fromScene","updateSun","geometry","roughness","OrbitControls","maxPolarAngle","target","minDistance","maxDistance","Stats","dom","addEventListener","init","i","color","skinning","encoding","anisotropy","imgTexture","createMaterial","listener","sound","buffer","setBuffer","setLoop","setVolume","createSound","Fragment","Boolean","location","hostname","match","ReactDOM","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3b48203f.chunk.js","sourcesContent":["import React from 'react';\n\nimport * as THREE from 'three/build/three.module.js';\nimport Stats from 'three/examples/jsm/libs/stats.module.js';\nimport { GUI } from 'three/examples/jsm/libs/dat.gui.module.js';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport { Sky } from 'three/examples/jsm/objects/Sky.js';\nimport { Water } from 'three/examples/jsm/objects/Water.js';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\n\nvar container, stats;\nvar camera, scene, renderer;\nvar controls, water, sun, mesh;\nvar light\nlet newMaterial;\nlet standardMaterial;\nlet newStandard;\nconst mixers = [];\nconst clock = new THREE.Clock();\n\nconst loader = new GLTFLoader();\nconst onProgress = () => { };\nconst onError = (errorMessage) => { console.log(errorMessage); };\n\n\nfunction createSound(){\n  var listener = new THREE.AudioListener();\n  // camera.add( listener );\n\n  // create a global audio source\n  var sound = new THREE.Audio( listener );\n\n// load a sound and set it as the Audio object's buffer\n  var audioLoader = new THREE.AudioLoader();\n  audioLoader.load( 'New Recording 2.m4a', function( buffer ) {\n    sound.setBuffer( buffer );\n\t  sound.setLoop( true );\n\t  sound.setVolume( 1 );\n\t  sound.play();\n  });\n\n}\nfunction createMaterial(){\n  //let diffuseColor = 0xfcfafa;\n  newMaterial = new THREE.MeshBasicMaterial({ color: 0xffffff, skinning: true});\n  standardMaterial = new THREE.MeshStandardMaterial({ color:0x8e80ab, skinning: true});\n  const textureLoader = new THREE.TextureLoader();\n  const texture = textureLoader.load( 'textures/wave-textures-white-background-vector_53876-60286.jpg' );\n        texture.encoding = THREE.sRGBEncoding;\n        texture.anisotropy = 16;\n  const imgTexture = new THREE.TextureLoader().load('pinkCloudBlueSky.jpg');\n        imgTexture.wrapS = imgTexture.wrapT = THREE.RepeatWrapping;\n        imgTexture.anisotropy = 16;\n  newStandard = new THREE.MeshBasicMaterial({\n    //map: imgTexture,\n    color: 0xfcfafa,\n    //bumpMap: imgTexture,\n    //bumpScale: 1,\n    //displacementMap: imgTexture,\n    //displacementScale: 1,\n    //envMap: imgTexture,\n    skinning: true\n  });\n}\n\nfunction loadChair(position) {\n  const url = \"modern_rocking_chair/scene.gltf\";\n\n  if (!position) {\n    var position = new THREE.Vector4(1000, 1000, 1000,1000);\n\n  }\n\n  const onLoad = (gltf) => {\n      gltf.scene.position.copy(position);\n      gltf.scene.scale.set(60, 60, 60); // scale here\n      scene.add(gltf.scene);\n  };\n  loader.load(url, gltf => onLoad(gltf, newStandard), onProgress, onError);\n\n}\n\n// function loadCookie(position) {\n//   const url = \"cookie/scene.gltf\";\n//\n//   if (!position) {\n//     var position = new THREE.Vector4(1000, 1000, 1000,1000);\n//\n//   }\n//\n//   const onLoad = (gltf) => {\n//       gltf.scene.position.copy(position);\n//       gltf.scene.scale.set(1, 1, 1); // scale here\n//       scene.add(gltf.scene);\n//   };\n//   loader.load(url, gltf => onLoad(gltf, newStandard), onProgress, onError);\n//\n// }\n//\n// let human = null;\n// function loadHuman(position) {\n//   const url = \"human_animation_set/scene.gltf\";\n//\n//   const onLoad = ( gltf) => {\n//     gltf.scene.position.copy(position);\n//     gltf.scene.scale.set(0.5, 0.5, 0.5);\n//     scene.add( gltf.scene);\n//\n//     const model = gltf.scene.children[ 0 ];\n//     model.position.copy( position );\n//\n//     human = model;\n//     const animation = gltf.animations[ 0 ];\n//\n//     const mixer = new THREE.AnimationMixer( model );\n//     mixers.push( mixer );\n//\n//     const action = mixer.clipAction(animation);\n//     action.play();\n//   };\n//\n//   loader.load(url, gltf => onLoad(gltf, newMaterial), onProgress, onError);\n// }\n\n\nlet deer = null;\n\nfunction loadDeer(position) {\n    const url = \"deer_23/scene.gltf\";\n    const onLoad = ( gltf) => {\n      gltf.scene.position.copy(position);\n      gltf.scene.scale.set(5, 5, 5);\n      scene.add( gltf.scene);\n\n      const model = gltf.scene.children[ 0 ];\n      model.position.copy( position );\n\n      deer = model;\n      const animation = gltf.animations[ 0 ];\n\n      const mixer = new THREE.AnimationMixer( model );\n      mixers.push( mixer );\n\n      const action = mixer.clipAction(animation);\n      action.play();\n    };\n\n    loader.load(url, gltf => onLoad(gltf, newMaterial), onProgress, onError);\n}\n\n// let dolphin = null;\n//\n// function loadDolphin(position) {\n//     const url = \"game-ready_dolphin_swimming/scene.gltf\";\n//     const onLoad = ( gltf) => {\n//       gltf.scene.position.copy(position);\n//       gltf.scene.scale.set(10, 10, 10);\n//       scene.add( gltf.scene);\n//\n//       const model = gltf.scene.children[ 0 ];\n//       model.position.copy( position );\n//\n//       dolphin = model;\n//       const animation = gltf.animations[ 0 ];\n//\n//       const mixer = new THREE.AnimationMixer( model );\n//       mixers.push( mixer );\n//\n//       const action = mixer.clipAction(animation);\n//       action.play();\n//     };\n//\n//     loader.load(url, gltf => onLoad(gltf, newMaterial), onProgress, onError);\n// }\n\nfunction init() {\n\n    container = document.getElementById('root');\n\n    //\n    renderer = new THREE.WebGLRenderer();\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    container.appendChild(renderer.domElement);\n\n    light = new THREE.AmbientLight(0xc3d1d9,1);\n\n    scene = new THREE.Scene();\n\n    camera = new THREE.PerspectiveCamera( 55, window.innerWidth / window.innerHeight, 1, 20000 );\n    camera.position.set( -144.37621838106483, 87.53752760239382, -15.698458124364846);\n\n    sun = new THREE.Vector3();\n\n    //\n\n    // Water\n\n    var waterGeometry = new THREE.PlaneBufferGeometry(10000, 20000);\n\n    var waterNormals = new THREE.TextureLoader().load(\"/xiong-1 .jpg\", function (texture) {\n        texture.wrapS = texture.wrapT = THREE.RepeatWrapping;\n    });\n\n    water = new Water(\n        waterGeometry,\n        {\n            textureWidth: 512,\n            textureHeight: 512,\n            waterNormals: waterNormals,\n            alpha: 1.0,\n            sunDirection: new THREE.Vector3(),\n            sunColor: 0xd48b33,\n            waterColor: 0xd48b33,\n            //waterColor: 0x001e0f,\n            distortionScale: 1,\n            fog: scene.fog !== undefined\n        }\n    );\n\n    water.rotation.x = - Math.PI / 2;\n\n    scene.add(water);\n\n    // Skybox\n\n    var sky = new Sky();\n    sky.scale.setScalar(10000);\n    scene.add(sky);\n    scene.add(light);\n    var uniforms = sky.material.uniforms;\n\n    uniforms['turbidity'].value = 10;\n    uniforms['rayleigh'].value = 5;\n    uniforms['mieCoefficient'].value = 0.005;\n    uniforms['mieDirectionalG'].value = 0.8;\n\n    var parameters = {\n        inclination: 0.49,\n        azimuth: 0.49,\n    };\n\n    var pmremGenerator = new THREE.PMREMGenerator(renderer);\n\n    function updateSun() {\n\n        var theta = Math.PI * (parameters.inclination - 0.5);\n        var phi = 2 * Math.PI * (parameters.azimuth - 0.5);\n\n        sun.x = Math.cos(phi);\n        sun.y = Math.sin(phi) * Math.sin(theta);\n        sun.z = Math.sin(phi) * Math.cos(theta);\n\n        sky.material.uniforms['sunPosition'].value.copy(sun);\n        water.material.uniforms['sunDirection'].value.copy(sun).normalize();\n\n        scene.environment = pmremGenerator.fromScene(sky).texture;\n\n    }\n\n    updateSun();\n\n    //\n\n    var geometry = new THREE.BoxBufferGeometry(6, 6, 6);\n    var material = new THREE.MeshStandardMaterial({ roughness: 0 });\n\n    mesh = new THREE.Mesh(geometry, material);\n\n    controls = new OrbitControls(camera, renderer.domElement);\n    controls.maxPolarAngle = Math.PI * 0.5;\n    controls.target.set(0, 50, 0);\n    controls.minDistance = 40.0;\n    controls.maxDistance = 150.0;\n    controls.update();\n\n    stats = new Stats();\n    container.appendChild(stats.dom);\n\n    window.addEventListener('resize', onWindowResize, false);\n\n}\n\nfunction onWindowResize() {\n\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.updateProjectionMatrix();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n\n}\n\nfunction moveDeer () {\n  if(deer && deer.position){\n\n    if(deer.position.z <= 15) {\n      deer.position.z += 0.6;\n    }\n\n    if(deer.position.x <= 4) {\n      deer.position.x += 0.08;\n    }\n  }\n}\n\nfunction update() {\n\n  const delta = clock.getDelta();\n\n  for ( const mixer of mixers ) {\n    mixer.update( delta );\n  }\n\n}\n\nfunction animate() {\n\n    requestAnimationFrame(animate);\n    render();\n    stats.update();\n    update();\n    moveDeer();\n\n}\n\nfunction render() {\n    //console.log(camera);\n    var time = performance.now() * 0.001;\n\n    mesh.position.x = Math.sin(time) * 20;\n    mesh.position.z = Math.cos(time) * 20;\n    mesh.rotation.x = time * 0.5;\n    mesh.rotation.z = time * 0.51;\n\n    water.material.uniforms['time'].value += 1.0 / 60.0;\n\n    renderer.render(scene, camera);\n\n}\n\nfunction App() {\n    init();\n\n\n    //console.log(scene);\n\n    for (let i = 0; i < 3; i++) {\n\n    }\n\n    for (let i = 0; i < 30; i++) {\n\n   }\n    createMaterial();\n    loadDeer(new THREE.Vector3(100, 0, -20));\n    loadChair(new THREE.Vector3(20, -0.1, -20));\n    // loadHuman(new THREE.Vector3(1000, -0.1, -20));\n    // loadCookie(new THREE.Vector3(10000, 0, -20));\n    // loadDolphin(new THREE.Vector3(10, -1, -5));\n\n    animate();\n\n    document.addEventListener('keyup', () => {\n        createSound();\n    })\n\n    return <React.Fragment />;\n}\n\nexport default App;\n","import React from 'react';\n\n// assignment01\n// import AS1 from \"./assignment01\";\n//import AS2 from \"./assignment2\";\n//export default AS2;\n\nimport FinalProject from \"./finalproject\";\nexport default FinalProject;\n\n// import Final2 from \"./final2\";\n// export default Final2;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}